ggplot2::ggplot(theData, aes(Value, fill=SiteName)) + geom_bar(position="dodge") + opts(title="")
theData <- plyr::rbind.fill(westminster_sites, putney_sites)
ggplot2::ggplot(theData, aes(Value, fill=SiteName)) + geom_bar(position="dodge") + opts(title="")
require(ggplot2)
ggplot(theData, aes(Value, fill=SiteName)) + geom_bar(position="dodge") + opts(title="")
ggplot(theData, aes(Value, fill=SiteName)) + geom_bar(position="dodge") + opts(title=""))
ggplot(theData, aes(Value, fill=SiteName)) + geom_bar(position="dodge")
ggplot(theData, aes(Year, fill=Value)) + geom_bar(position="dodge")
ggplot(theData, aes(SiteName, fill=Value)) + geom_bar(position="dodge")
head(theData)
head(putney_sites)
westminster_sites <- aq_objectives %>% filter(SiteCode == "MY1" | SiteCode == "WM6" & ObjectiveName == "200 ug/m3 as a 1 hour mean, not to be exceeded more than 18 times a year")
head(westminster_sites)
westminster_sites <- aq_objectives %>% filter(SiteCode == "MY1" | SiteCode == "WM6") %>% filter(ObjectiveName == "200 ug/m3 as a 1 hour mean, not to be exceeded more than 18 times a year")
putney_sites <- aq_objectives %>% filter(SiteCode == "WA7" | SiteCode == "WA8") %>% filter( ObjectiveName == "200 ug/m3 as a 1 hour mean, not to be exceeded more than 18 times a year")
theData <- plyr::rbind.fill(westminster_sites, putney_sites)
ggplot(theData, aes(SiteName, fill=Value)) + geom_bar(position="dodge")
ggplot(theData, aes(Year, fill=Value)) + geom_bar(position="dodge")
names(theData)
ggplot(theData, aes(Year, fill=Value))
head(theData)
unique(theData$SiteCode)
lattice::barchart(factor(Year) ~ Value | SiteName, data = theData,
xlab = "Number of exceedances", origin = 0))
lattice::barchart(factor(Year) ~ Value | SiteName, data = theData,
xlab = "Number of exceedances", origin = 0)
ggplot(theData, aes(Value, fill=SiteName))
ggplot(theData, aes(Year ~ Value, fill=SiteName))
ggplot(theData, aes(Year, fill=SiteName))
theData <- filter(SiteCode == "MY1")
theData <- theData %>% filter(SiteCode == "MY1")
ggplot(theData, aes(Year, fill=SiteName))
ggplot(theData, aes(Value, fill=SiteName))
ggplot(theData, aes(Value, fill=factor(SiteName))
)
ggplot(theData, aes(Value, fill=factor(Year)))
ggplot(theData, aes(year, Value, fill=SiteName)
)
ggplot(theData, aes(Year, Value, fill=SiteName))
ggplot(theData, aes(Year, Value, fill=Value))
ggplot(theData, aes(factor(Year), Value, fill=Value))
ggplot(theData, aes(factor(Year), SiteName, fill=Value))
aes(x = mpg, y = wt)
ggplot(mpg, aes(displ, hwy)) + geom_point()
ggplot(mpg) + geom_point(aes(displ, hwy))
ggplot(theData) + geom_point(aes(Year, Value))
ggplot(theData) + geom_point(aes(factor(Year), Value))
ggplot(theData) + geom_bar(aes(Year, Value))
ggplot(theData, aes(Year, Vlaue)) + geom_bar()
ggplot(theData, aes(Year, Value)) + geom_bar()
ggplot(theData, aes(Year, Value)) + geom_point()
ggplot(theData, aes(Year, Value)) + geom_bar(position="dodge")
ggplot(theData, aes(Year, Value)) + geom_point()
westminster_sites <- aq_objectives %>% filter(SiteCode == "MY1" | SiteCode == "WM6") %>% filter(ObjectiveName == "200 ug/m3 as a 1 hour mean, not to be exceeded more than 18 times a year")
westminster_sites <- aq_objectives %>% filter(SiteCode == "MY1" | SiteCode == "WM6") %>% filter(ObjectiveName == "200 ug/m3 as a 1 hour mean, not to be exceeded more than 18 times a year")
putney_sites <- aq_objectives %>% filter(SiteCode == "WA7" | SiteCode == "WA8") %>% filter( ObjectiveName == "200 ug/m3 as a 1 hour mean, not to be exceeded more than 18 times a year")
theData <- plyr::rbind.fill(westminster_sites, putney_sites)
ggplot(theData, aes(Year, Value)) + geom_point()
ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_point()
ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(position="dodge")
ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(stat="identity")
ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(stat="identity") + opts(title="Examplary Grouped Barplot")
ggplot2::ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(stat="identity")
ggplot2::ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(stat="identity") + scale_y_discrete(name ="Exceedances per year")
ggplot2::ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(stat="identity") + scale_y_discrete(name ="Exceedances per year")
ggplot2::ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(stat="identity") + scale_y(name ="Exceedances per year")
ggplot2::ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(stat="identity")
ggplot2::ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(stat="identity") + scale_y(name ="Exceedances per year", limits=seq(0, 5000, 1000))
ggplot2::ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(stat="identity") + scale_y_discrete(name ="Exceedances per year", limits=seq(0, 5000, 1000))
ggplot2::ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(stat="identity") + scale_y_discrete(name ="Exceedances per year", limits=seq(0, 5000, 1000))
ggplot2::ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(stat="identity") + scale_y_discrete(name ="Exceedances per year", limits=seq(0, 6000, 1000))
ggplot2::ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(stat="identity") + scale_y_discrete(name ="Exceedances per year", limits=seq(0, 5000, 1000))
ggplot2::ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(stat="identity") + scale_y_continuous(name ="Exceedances per year", limits=seq(0, 5000, 1000))
ggplot2::ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(stat="identity") + scale_y_continuous(name ="Exceedances per year")
ggplot2::ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(stat="identity") + scale_y_continuous(name ="Exceedances per year") + guide_legend(title=NULL)
ggplot2::ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(stat="identity") + scale_y_continuous(name ="Exceedances per year") + legend(title=NULL)
ggplot2::ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(stat="identity") + scale_y_continuous(name ="Exceedances per year")
ggplot2::ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(stat="identity") + scale_y_continuous(name ="Exceedances per year") + scale_fill_discrete(name="Experimental\nCondition")
ggplot2::ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(stat="identity") + scale_y_continuous(name ="Exceedances per year") + scale_fill_discrete(name="")
ggplot2::ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(stat="identity") + scale_y_continuous(name ="Exceedances per year") + scale_fill_continuous(name="")
ggplot2::ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(stat="identity") + scale_y_continuous(name ="Exceedances per year") + scale_fill_discrete(name="Experimental\nCondition")
ggplot2::ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(stat="identity") + scale_y_continuous(name ="Exceedances per year") + scale_fill_discrete(name="Site name")
putney_sites
westminster_sites
library(devtools)
install_github("wch/webshot")
load(".RData")
# Load the plyr package
library(dplyr)
#  Select theSites
theSites <- laqn_sites %>% filter(DateClosed == "" & SiteCode == "MY1" | SiteCode == "WM6" | SiteCode == "WA7" | SiteCode == "WA8")
# Load the leaflet package
library(leaflet)
m <- leaflet() %>%
setView(lng = -0.17, lat = 51.5, zoom = 12) %>%
addTiles() %>%
addMarkers(lng = theSites$Longitude,
lat = theSites$Latitude,
popup = paste(theSites$SiteName, theSites$SiteLink, sep = ", "))
saveWidget(m, "temp.html", selfcontained = FALSE)
webshot("temp.html", file = "Rplot.png",
cliprect = "viewport")
library(leaflet)
library(htmlwidgets)
library(webshot)
library(leaflet)
library(htmlwidgets)
library(webshot)
m <- leaflet() %>%
setView(lng = -0.17, lat = 51.5, zoom = 12) %>%
addTiles() %>%
addMarkers(lng = theSites$Longitude,
lat = theSites$Latitude,
popup = paste(theSites$SiteName, theSites$SiteLink, sep = ", "))
saveWidget(m, "temp.html", selfcontained = FALSE)
webshot("temp.html", file = "Rplot.png",
cliprect = "viewport")
install.packages("mapview")
mapshot(m, file = "~/Rplot.png")
library(mapshot)
library(mapview)
mapshot(m, file = "~/Rplot.png")
mapshot(m, file = "/Rplot.png")
mapshot(m, file = "Rplot.png")
mapshot(m, file = "README_files\figure-html\unnamed-chunk-14-2.png", remove_url = TRUE)
mapshot(m, file = "README_files/figure-html/unnamed-chunk-14-2.png", remove_url = TRUE)
mapshot(m, file = "Rplot.png")
mapshot(m, file = "Rplot.png", remove_url = TRUE)
detach("package:mapview", unload=TRUE)
mapview::mapshot(m, file = "Rplot.png", remove_url = TRUE)
load(".RData")
theData <- aq_objectives %>% filter(SiteCode == "MY1" | SiteCode == "WM6" | SiteCode == "WA7" | SiteCode == "WA8") %>% filter(ObjectiveName == "200 ug/m3 as a 1 hour mean, not to be exceeded more than 18 times a year")
theData <- theData %>% filter(Year != format(Sys.Date(), "%Y") | Year != format(Sys.Date()-1, "%Y"))
library(ggplot2)
ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(stat="identity") + scale_y_continuous(name ="Exceedances per year") + scale_fill_discrete(name="Site name")
format(Sys.Date(), "%Y")
format(Sys.Date()-1, "%Y")
theData <- theData %>% filter(Year != format(Sys.Date(), "%Y") & Year != format(Sys.Date()-1, "%Y"))
ggplot(theData, aes(Year, Value, fill = SiteName)) + geom_bar(stat="identity") + scale_y_continuous(name ="Exceedances per year") + scale_fill_discrete(name="Site name")
theData
theData$Year
class(format(Sys.Date()-1, "%Y") )
class(theData$Year)
theData <- theData %>% filter(Year != as.numeric(format(Sys.Date(), "%Y")) | Year != as.numeric(format(Sys.Date()-1, "%Y"))
)
class(theData$Year)
theData$Year
theData <- theData %>% filter(Year != as.numeric(format(Sys.Date(), "%Y")) & Year != as.numeric(format(Sys.Date()-1, "%Y")))
theData$Year
theData <- theData %>% filter(Year != as.numeric(format(Sys.Date(), "%Y")))
theData$Year
theData <- theData %>% filter(Year != as.numeric(format(Sys.Date()-1, "%Y")))
theData$Year
theData <- aq_objectives %>% filter(SiteCode == "MY1" | SiteCode == "WM6" | SiteCode == "WA7" | SiteCode == "WA8") %>% filter(ObjectiveName == "200 ug/m3 as a 1 hour mean, not to be exceeded more than 18 times a year")
theData <- theData %>% filter(Year != as.numeric(format(Sys.Date()-1, "%Y")))
theData$Year
theData <- theData %>% filter(Year = as.numeric(format(Sys.Date()-1, "%Y")))
theData <- theData %>% filter(Year == as.numeric(format(Sys.Date()-1, "%Y")))
theData$Year
theData <- theData %>% filter(Year == 2015
)
theData <- theData %>% filter(Year == 2015
theData
theData$Year
theData <- aq_objectives %>% filter(SiteCode == "MY1" | SiteCode == "WM6" | SiteCode == "WA7" | SiteCode == "WA8") %>% filter(ObjectiveName == "200 ug/m3 as a 1 hour mean, not to be exceeded more than 18 times a year")
theData <- aq_objectives %>% filter(SiteCode == "MY1" | SiteCode == "WM6" | SiteCode == "WA7" | SiteCode == "WA8") %>% filter(ObjectiveName == "200 ug/m3 as a 1 hour mean, not to be exceeded more than 18 times a year")
theData <- theData %>% filter(Year < as.numeric(format(Sys.Date()-1, "%Y")))
theData$Year
format(Sys.Date()-1, "%Y")
theData <- theData %>% filter(Year < as.integer(format(Sys.Date(), "%Y"))-1)
theData$Year
aq_objectives %>% filter(SiteCode == "WA8")
library(plyr)
aq_objectives %>% filter(SiteCode == "WA8")
library(dplyr)
aq_objectives %>% filter(SiteCode == "WA8")
laqn_sites %>% filter(SiteCode == "WA8")
laqn_sites %>% filter(SiteCode == "WA1")
laqn_sites %>% filter(SiteCode == "WA7")
laqn_sites %>% filter(SiteCode == "WM6")
install.packages("pander")
install.packages("kable")
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_laqn_data.R')
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_site_aq_objectives.R')
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_site_aq_objectives.R')
get_site_aq_objectives()
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_site_aq_objectives.R')
get_site_aq_objectives()
theSite = "MY1"
metric = "Annual"
data_type = "MonitoringObjective"
dates = 2016
datee = as.numeric(format(Sys.Date(), "%Y"))
api_type = "Json"
# Create the year range
theYears <- seq(dates, datee, 1)
if (length(theYears) == 1) { theYears <- unique(theYears) }
# Create the API
base_api <- "http://api.erg.kcl.ac.uk/AirQuality/"
the_apis <- paste0(base_api, metric, "/", data_type, "/SiteCode=", theSite,
"/Year=", theYears, "/", api_type)
the_apis
theData <- lapply(the_apis, get_laqn_data)
head(theData)
theSite = "ZV1"
dates = 2000
# Create the year range
theYears <- seq(dates, datee, 1)
if (length(theYears) == 1) { theYears <- unique(theYears) }
# Create the API
base_api <- "http://api.erg.kcl.ac.uk/AirQuality/"
the_apis <- paste0(base_api, metric, "/", data_type, "/SiteCode=", theSite,
"/Year=", theYears, "/", api_type)
the_apis
# Get the data
theData <- lapply(the_apis, get_laqn_data)
# Drop NAs (for years where there's no data)
theData <- plyr::ldply(theData[!is.na(theData)], data.frame)
head(theData)
# Make sensible column names
names(theData) <- gsub("X.|@|Site\\.{2}|SiteObjectives.", "", names(theData))
names(theData)
names(theData) <- gsub("X.|@|Site.Objective\\.{2}|SiteObjectives.", "", names(theData))
names(theData)
# Remove factors
theData <- data.frame(lapply(theData, as.character),
stringsAsFactors = FALSE)
# Convert columns to numeric
theData[c("Latitude", "Longitude",
"LatitudeWGS84", "LongitudeWGS84",
"Year", "Value")] <- as.numeric(unlist(theData[c("Latitude", "Longitude",
"LatitudeWGS84", "LongitudeWGS84",
"Year", "Value")]))
return(theData)
head(theData)
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_site_aq_objectives.R')
site_aq_objectives <- get_site_aq_objectives()
the_apis <- paste0(base_api, metric, "/", data_type, "/SiteCode=", theSite,
"/Year=", theYears, "/", api_type)
the_apis
# Get the data
theData <- lapply(the_apis, get_laqn_data)
# Drop NAs (for years where there's no data)
theData <- plyr::ldply(theData[!is.na(theData)], data.frame)
# Make sensible column names
names(theData) <- gsub("X.|@|Site.Objective\\.{2}|SiteObjectives.", "", names(theData))
# Remove factors
theData <- data.frame(lapply(theData, as.character),
stringsAsFactors = FALSE)
names(theData)
theData <- lapply(the_apis, get_laqn_data)
# Drop NAs (for years where there's no data)
theData <- plyr::ldply(theData[!is.na(theData)], data.frame)
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_site_aq_objectives.R')
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_site_aq_objectives.R')
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_site_aq_objectives.R')
arcpyr::connect_ArcGIS(python_Path)
# Create environment
arcpy <- arcpyr:::arcpy_env()
python_Path = "c:/Python27/ArcGIS10.4"
arcpyr::connect_ArcGIS(python_Path)
# Create environment
arcpy <- arcpyr:::arcpy_env()
names(theData)
names(theData) <- gsub("X.|@|Site\\.{2}|SiteObjectives.", "", names(theData))
names(theData)
names(theData) <- gsub("X.|@|Site.Objective\\.|Site\\.{2}|SiteObjectives.", "", names(theData))
names(theData)
# Get the data
theData <- lapply(the_apis, get_laqn_data)
# Drop NAs (for years where there's no data)
theData <- plyr::ldply(theData[!is.na(theData)], data.frame)
names(theData) <- gsub("X.|@|Site.Objective\\.{2}|Site\\.{2}|SiteObjectives.", "", names(theData))
names(theData)
# Remove factors
theData <- data.frame(lapply(theData, as.character),
stringsAsFactors = FALSE)
# Convert columns to numeric
theData[c("Latitude", "Longitude",
"LatitudeWGS84", "LongitudeWGS84",
"Year", "Value")] <- as.numeric(unlist(theData[c("Latitude", "Longitude",
"LatitudeWGS84", "LongitudeWGS84",
"Year", "Value")]))
head(theData)
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_site_aq_objectives.R')
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_site_aq_objectives.R')
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_site_aq_objectives.R')
kcl_sites <- openair::importMeta(source = "kcl", all = FALSE)
View(kcl_sites)
kcl_sites <- openair::importMeta(source = "kcl", all = TRUE)
View(kcl_sites)
View(kcl_sites)
kcl_sites <- openair::importMeta(source = "kcl", all = TRUE)
theSites <- kcl_sites$code
site_aq_objectives <- get_site_aq_objectives(theSites = kcl_sites$code)
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_site_aq_objectives.R')
site_aq_objectives <- get_site_aq_objectives(theSites = kcl_sites$code)
site_aq_objectives <- get_site_aq_objectives(theSite = kcl_sites$code)
head(aq_objectives)
plot(aq_objectives$Year)
getwd()
write.table(site_aq_objectives, file = "site_aq_objectives.txt", row.names = FALSE, quote = FALSE, sep = ";")
kcl_sites_aq_objectives <- aq_objectives
rm(aq_objectives)
write.table(kcl_sites_aq_objectives, file = "kcl_sites_aq_objectives.txt", row.names = FALSE, quote = FALSE, sep = ";")
head(site_aq_objectives)
barplot(aq_objectives$Year)
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_site_aq_objectives.R')
load("C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/.RData")
kcl_sites <- openair::importMeta(source = "kcl", all = TRUE)
kcl_sites <- openair::importMeta(source = "kcl", all = TRUE)
kcl_sites <- openair::importMeta(source = "kcl", all = TRUE)
metric = "Annual"
data_type = "MonitoringObjective"
dates = 1980
datee = as.numeric(format(Sys.Date(), "%Y"))
api_type = "Json"
# Create the year range
theYears <- seq(dates, datee, 1)
if (length(theYears) == 1) { theYears <- unique(theYears) }
# Create the API
base_api <- "http://api.erg.kcl.ac.uk/AirQuality/"
theSite = kcl_sites$code
the_apis <- paste0(base_api, metric, "/", data_type, "/SiteCode=", theSite,
"/Year=", theYears, "/", api_type)
head(the_apis)
length(theSite)
test <- rep(theSite, each = length(theYears))
test <- rep(theSite, each = length(theSite) * length(theYears))
head(test)
head(test,32)
test <- rep(theSite, each = length(theYears))
test <- rep(theSite, each = length(theSite) * length(theYears))
head(test,100)
length(theSite) * length(theYears)
test <- rep(theYears, each = length(theSite))
test2<-paste0(test, theSite)
head(test2)
theYears <- rep(theYears, each = length(theSite))
# Create the API
base_api <- "http://api.erg.kcl.ac.uk/AirQuality/"
the_apis <- paste0(base_api, metric, "/", data_type, "/SiteCode=", theSite,
"/Year=", theYears, "/", api_type)
head(the_apis)
the_apis[890:900]
the_apis[1:10]
the_apis[1770:1800]
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_site_aq_objectives.R')
load("C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/.RData")
load("C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/.RData")
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_site_aq_objectives.R')
get_site_aq_objectives()
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_site_aq_objectives.R')
proc.time() - ptm
head(kcl_sites_aq_objectives)
write.table(kcl_sites_aq_objectives, file = "kcl_sites_aq_objectives.txt", row.names = FALSE, quote = FALSE, sep = ";")
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_site_aq_objectives.R')
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_site_aq_objectives.R')
install.packages("tibble")
install.packages("RSelenium")
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_site_aq_objectives.R')
metric = "Information"
data_type = "Groups"
api_type = "Json"
# Create the API
base_api <- "http://api.erg.kcl.ac.uk/AirQuality/"
the_apis <- paste0(base_api, metric, "/", data_type, "/GroupName=", theGroup,
"/", api_type)
the_apis <- paste0(base_api, metric, "/", data_type, "/", api_type)
# Get the data
theData <- plyr::ldply(lapply(the_apis, get_laqn_data), data.frame)
theData
head(theData)
# Make sensible column names
names(theData) <- gsub("Groups.Group.\\.{2}", "", names(theData))
head(theData)
# Make sensible column names
names(theData) <- gsub("Groups.Group\\.{2}", "", names(theData))
head(theData)
theData
head(theData, 10)
head(theData)
theGroups <- theData$GroupName
theGroups
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_all_GroupNames.R')
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_all_GroupNames.R')
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_all_GroupNames.R')
theData <- get_all_GroupNames()
theData <- get_all_GroupNames()
theData <- get_all_GroupNames()
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_all_GroupNames.R')
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_all_GroupNames.R')
length(kcl_sites_aq_objectives)
dim(kcl_sites_aq_objectives)
nrows(kcl_sites_aq_objectives)
theData <- get_all_GroupNames()
theData
head(theData)
kcl_sites <- get_laqn_sites(theGroup = theData$GroupName)
head(kcl_sites)
write.table(kcl_sites, file = "kcl_sites.txt", row.names = FALSE, quote = FALSE, sep = ";")
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_all_Groups.R')
theGroups <- get_all_Groups()
head(theGroups)
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_all_Groups.R')
openair_kcl_sites <-importMeta(source = "kcl", all = TRUE)
openair_kcl_sites <-openair::importMeta(source = "kcl", all = TRUE)
head(openair_kcl_sites, 1)
head(kcl_sites, 1)
openair_kcl_codes <- openair_kcl_sites$code
kcl_sites_codes <- kcl_sites$SiteCode
names(kcl_sites) <- "code"
names(kcl_sites)
names(kcl_sites_codes)<- "code"
names(kcl_sites_codes)
View(openair_kcl_sites)
View(openair_kcl_sites)
View(openair_kcl_codes)
openair_kcl_sites <-openair::importMeta(source = "kcl", all = TRUE)
kcl_sites <- get_laqn_sites(theGroup = theGroups$GroupName)
theDiff<-diff(kcl_sites$SiteCode, openair_kcl_sites$code)
class(openair_kcl_sites$code)
class(kcl_sites$SiteCode)
openair_kcl_sites<-tibble::tibble(openair_kcl_sites)
openair_kcl_sites<-tibble::data_frame(openair_kcl_sites)
openair_kcl_sites<-tibble::tibble(tibble::tibble(openair_kcl_sites))
tibble(x = tibble(1, 2, 3))
tibble::tibble(x = tibble(1, 2, 3))
library(tibble)
tibble(x = tibble(1, 2, 3))
tibble(x = c(1, 2, 3))
head(openair_kcl_sites,2)
sappply(openair_kcl_sites,class)
sapply(openair_kcl_sites,class)
openair_kcl_sites$code<-as.character(openair_kcl_sites$code)
theDiff<-diff(kcl_sites$SiteCode, openair_kcl_sites$code)
kcl_sites$SiteCode
openair_kcl_sites$code
theDiff<-setdiff(kcl_sites$SiteCode, openair_kcl_sites$code)
(kcl_sites$SiteCode, openair_kcl_sites$code)
setdiff(kcl_sites$SiteCode, openair_kcl_sites$code)
length(unique(kcl_sites$SiteCode))
length(unique(openair_kcl_sites$code))
library(dplyr)
names(kcl_sites)
kcl_sites %>%
group_by(SiteCode) %>%
summarise(no_rows = length(SiteCode))
kcl_sites <- openair::importMeta(source = "kcl", all = TRUE)
kcl_sites %>%
group_by(SiteCode) %>%
summarise(no_rows = length(SiteCode))
names(kcl_sites)
kcl_sites %>%
group_by(code) %>%
summarise(no_rows = length(code))
rm(theData)
rm(theGroups, theDiff, the_apis)
rm(api_type, base_api, data_type, kcl_sites_codes, metric, openair_kcl_codes, ptm)
save.image("C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/.RData")
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/get_all_Groups.R')
save.image("C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/.RData")
load_all()
library("devtools", lib.loc="~/R/win-library/3.3")
load_all()
load_all()
load_all()
devtools::load_all("R")
load_all()
devtools::create("rlaqn")
install.packages("Rtools")
library(rlaqn)
library(rlaqn)
library(rlaqn)
library(rlaqn)
library(roxygen2)
library(rlaqn)
library(rlaqn)
library("rlaqn", lib.loc="~/R/win-library/3.3")
library(rlaqn)
library(rlaqn)
library("rlaqn", lib.loc="~/R/win-library/3.3")
library(rlaqn)
roxygen2::roxygenise()
library(roxygen2)
package.skeleton('test')
getwd()
library(rlaqn)
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/R/get_all_Groups.R')
library(rlaqn)
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/R/get_all_Groups.R')
library(rlaqn)
library(rlaqn)
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/R/get_all_Groups.R')
library(rlaqn)
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/R/get_all_Groups.R')
unlink("C:/Users/ukjxl007/Documents/R/win-library/3.3/00LOCK-R", recursive = TRUE)
library(rlaqn)
library("rlaqn", lib.loc="~/R/win-library/3.3")
library(rlaqn)
library("rlaqn", lib.loc="~/R/win-library/3.3")
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/R/get_all_Groups.R')
library(rlaqn)
library("rlaqn", lib.loc="~/R/win-library/3.3")
library(rlaqn)
library("rlaqn", lib.loc="~/R/win-library/3.3")
library(rlaqn)
library("rlaqn", lib.loc="~/R/win-library/3.3")
source('C:/Users/ukjxl007/Desktop/my documents/R/rlaqn/R/get_all_Groups.R')
library(rlaqn)
library(rlaqn)
library(rlaqn)
